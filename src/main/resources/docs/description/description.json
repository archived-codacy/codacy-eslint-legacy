[
  {
    "patternId": "no-useless-catch",
    "title": "Disallow unnecessary catch clauses",
    "description": "Disallow unnecessary catch clauses.",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-named-capture-group",
    "title": "Suggest using named capture group in regular expression ",
    "description": "Enforce using named capture group in regular expression.",
    "timeToFix": 5
  },
  {
    "patternId": "comma-dangle",
    "title": "Enforce Dangling Commas",
    "description": "Enforces consistent use of trailing commas in object and array literals",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The style of trailing commas [never, always, always-multiline]"
      }
    ]
  },
  {
    "patternId": "no-cond-assign",
    "title": "Prohibit Assignment in Conditions",
    "description": "Prohibits an assignment operator (such as =) in a conditional statement.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Cases where you want the assignment to be prohibited [except-parens, always]"
      }
    ]
  },
  {
    "patternId": "no-console",
    "title": "Prohibit console messages",
    "description": "Console messages are considered to be for debugging purposes and therefore not suitable to ship to the client.",
    "timeToFix": 5
  },
  {
    "patternId": "no-constant-condition",
    "title": "Prohibit constant expressions in conditions",
    "description": "Comparing a literal expression in a condition is usually a typo",
    "timeToFix": 10
  },
  {
    "patternId": "no-control-regex",
    "title": "Prohibit Control Characters in Regular Expressions",
    "description": "Prohibits special, invisible characters in the ASCII range 0-31. These characters are rarely used in JavaScript strings",
    "timeToFix": 15
  },
  {
    "patternId": "no-debugger",
    "title": "Prohibit debugger",
    "description": "Prohibits the usage of the debugger statement",
    "timeToFix": 5
  },
  {
    "patternId": "no-dupe-args",
    "title": "Prohibit duplicate arguments",
    "description": "Prohibits duplicated parameter names in the same function",
    "timeToFix": 15
  },
  {
    "patternId": "no-dupe-keys",
    "title": "Prohibit Duplicated Keys",
    "description": "Prohibits duplicated key names in the same object",
    "timeToFix": 10
  },
  {
    "patternId": "no-duplicate-case",
    "title": "Prohibit duplicate case label",
    "description": "A switch statement with duplicate case labels is an error.",
    "timeToFix": 10
  },
  {
    "patternId": "no-empty-character-class",
    "title": "Prohibit malformed Regular Expressions",
    "description": "Prohibits empty character classes in regular expressions, they do not match anything.",
    "timeToFix": 20
  },
  {
    "patternId": "no-empty",
    "title": "Prohibit empty Block Statements",
    "description": "Prohibits empty block statements, they are useless",
    "timeToFix": 5
  },
  {
    "patternId": "no-ex-assign",
    "title": "Prohibit assignment of the Exception Parameter",
    "description": "When an error is caught using a catch block, it's possible to accidentally (or purposely) overwrite the reference to the error.",
    "timeToFix": 10
  },
  {
    "patternId": "no-extra-boolean-cast",
    "title": "Prohibit extra boolean casts",
    "description": "Prohibits extra boolean casts like using double negation (!!)",
    "timeToFix": 10
  },
  {
    "patternId": "no-extra-parens",
    "title": "Prohibit Extra Parentheses",
    "description": "Restricts the use of parentheses to only where they are necessary.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Cases where will report unnecessary parentheses[all, functions]"
      }
    ]
  },
  {
    "patternId": "no-extra-semi",
    "title": "Prohibit Extra Semicolons",
    "description": "Prohibits extra semicolons that are unnecessary.",
    "timeToFix": 5
  },
  {
    "patternId": "no-func-assign",
    "title": "Prohibit Function Assignment",
    "description": "Prohibits assigning the name of a function to another function/variable",
    "timeToFix": 20
  },
  {
    "patternId": "no-inner-declarations",
    "title": "Enforce coherent Declarations",
    "description": "Enforces that function (and optionally variables) declarations to be in the root or function body",
    "timeToFix": 30,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies if the pattern only applies to functions or to both functions and variables [functions, both]"
      }
    ]
  },
  {
    "patternId": "no-invalid-regexp",
    "title": "Prohibits Invalid Regular Expressions",
    "description": "This rule validates string arguments passed to the RegExp constructor.",
    "timeToFix": 15
  },
  {
    "patternId": "no-irregular-whitespace",
    "title": "Prohibit irregular whitespace",
    "description": "Prohibits invalid or irregular whitespace characters",
    "timeToFix": 15
  },
  {
    "patternId": "no-negated-in-lhs",
    "title": "Prohibit negated left operand in operator",
    "description": "This error is raised to highlight a potential error, usually you want to negate both operand.",
    "timeToFix": 15
  },
  {
    "patternId": "no-obj-calls",
    "title": "Prohibit Global Object function calls",
    "description": "ECMAScript provides several global objects that are intended to be used as-is. Some will throw an error if you try to execute them as functions.",
    "timeToFix": 10
  },
  {
    "patternId": "no-regex-spaces",
    "title": "Prohibit Spaces in Regular Expressions",
    "description": "Prohibits the usage of spaces in Regular expressions",
    "timeToFix": 5
  },
  {
    "patternId": "no-sparse-arrays",
    "title": "Prohibit Sparse Arrays",
    "description": "Prohibits the usage of sparse arrays.",
    "timeToFix": 20
  },
  {
    "patternId": "no-unreachable",
    "title": "Prohibit Unreachable Code",
    "description": "Code that is unreachable will never run, it should be reviewed/removed.",
    "timeToFix": 20
  },
  {
    "patternId": "use-isnan",
    "title": "Enforce isNaN() to test for NaN",
    "description": "Enforces that you use isNaN instead of (== NaN) to compare with NaN",
    "timeToFix": 10
  },
  {
    "patternId": "valid-jsdoc",
    "title": "Enforce JSDoc correctness",
    "description": "Makes sure that your JSDoc generates your documentation correctly",
    "timeToFix": 15
  },
  {
    "patternId": "valid-typeof",
    "title": "Prohibit invalid typeof comparisons",
    "description": "Prohibits comparisons with strings that will never be a valid return of a typeof",
    "timeToFix": 5
  },
  {
    "patternId": "no-unexpected-multiline",
    "title": "Prohibit unexpected multiline expressions",
    "description": "Prohibits unexpected multiline expressions when not using semicolons",
    "timeToFix": 15
  },
  {
    "patternId": "accessor-pairs",
    "title": "Enforce getter/setter pairs in objects",
    "description": "When you define a setter, you must also define a getter.",
    "timeToFix": 10
  },
  {
    "patternId": "block-scoped-var",
    "title": "Prohibit out of scope variables",
    "description": "Prohibits the usage of variables outside the block where they are defined",
    "timeToFix": 15
  },
  {
    "patternId": "complexity",
    "title": "Prohibits high Cyclomatic Complexity",
    "description": "Cyclomatic complexity measures the number paths through a program's source code. Usually, the lower the better.",
    "timeToFix": 40,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The maximum cyclomatic complexity you want to allow"
      }
    ]
  },
  {
    "patternId": "consistent-return",
    "title": "Enforce Consistent Returns",
    "description": "Enforces that every return statement in a function to return the same type",
    "timeToFix": 20
  },
  {
    "patternId": "curly",
    "title": "Enforce Curly Brace Conventions",
    "description": "Enforces that you use the same curly brace convention throughout all the code",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The convention used by this pattern [all, multi, multi-line, multi-or-nest]"
      }
    ]
  },
  {
    "patternId": "default-case",
    "title": "Enforce default case in switch",
    "description": "Enforces that you have a default case in your switch statements",
    "timeToFix": 15
  },
  {
    "patternId": "dot-notation",
    "title": "Prohibit square-bracket notation",
    "description": "Prohibits access properties using the square-bracket notation (foo[\"bar\"]).",
    "timeToFix": 10
  },
  {
    "patternId": "dot-location",
    "title": "Enforce coherent multiline dot",
    "description": "Enforces the dot location when accessing a member in an object",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies where you prefer the dot [property, object]"
      }
    ]
  },
  {
    "patternId": "eqeqeq",
    "title": "Enforce === and !==",
    "description": "Requires the use of === and !== instead of == and !=",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The style of equality to follow [smart, allow-null]"
      }
    ]
  },
  {
    "patternId": "guard-for-in",
    "title": "Enforce Guarding for-in",
    "description": "Enforces that you make sure the properties exist when looping over objects",
    "timeToFix": 10
  },
  {
    "patternId": "no-alert",
    "title": "Prohibits Alert",
    "description": "Prohibits the usage of alert, confirm, and prompt, as they are widely considered to be obtrusive as UI elements",
    "timeToFix": 30
  },
  {
    "patternId": "no-caller",
    "title": "Prohibit caller/callee",
    "description": "Prohibits the usage of arguments.caller and arguments.callee",
    "timeToFix": 20
  },
  {
    "patternId": "no-div-regex",
    "title": "Prohibit Regex like division",
    "description": "Prohibits regexs that look like a division",
    "timeToFix": 15
  },
  {
    "patternId": "no-else-return",
    "title": "Prohibit return in else",
    "description": "Prohibits using return inside a else blockIf an if block contains a return statement, its contents can be placed outside of the block.",
    "timeToFix": 15
  },
  {
    "patternId": "no-eq-null",
    "title": "Prohibit Null Comparisons ==",
    "description": "Prohibits comparing null with == or !=, use === or !== instead",
    "timeToFix": 5
  },
  {
    "patternId": "no-eval",
    "title": "Prohibit eval()",
    "description": "Prohibits the usage of eval()",
    "timeToFix": 5
  },
  {
    "patternId": "no-extend-native",
    "title": "Prohibit Extending of Native Objects",
    "description": "Prohibits extension of native objects.",
    "timeToFix": 20
  },
  {
    "patternId": "no-extra-bind",
    "title": "Prohibit unnecessary function binding",
    "description": "Prohibits bind() method when it does not accomplish anything",
    "timeToFix": 15
  },
  {
    "patternId": "no-fallthrough",
    "title": "Prohibit Switch-Case Fallthrough",
    "description": "Prohibits the usage of cases without breaks (break, return or throw)",
    "timeToFix": 15
  },
  {
    "patternId": "no-floating-decimal",
    "title": "Prohibit Floating Decimals",
    "description": "Prohibits the usage of decimal point when not preceded or followed by a number",
    "timeToFix": 10
  },
  {
    "patternId": "no-implicit-coercion",
    "title": "Prohibit implicit type conversion",
    "description": "Prohibits type conversions that are implicitly made, making them hard to understand",
    "timeToFix": 10
  },
  {
    "patternId": "no-implied-eval",
    "title": "Prohibit Implied eval()",
    "description": "Prohibits using eval(), even implicitly. There are security and performance implications",
    "timeToFix": 15
  },
  {
    "patternId": "no-invalid-this",
    "title": "Prohibit ´this´ outside class",
    "description": "this keyword outside of class or class-like objects might be undefined and raise a TypeError.",
    "timeToFix": 15
  },
  {
    "patternId": "no-iterator",
    "title": "Prohibit Iterator",
    "description": "Prohibits the __iterator__ property, it is obsolete",
    "timeToFix": 20
  },
  {
    "patternId": "no-labels",
    "title": "Prohibit Labeled Statements",
    "description": "Prohibits labeled statements and jumps to it like break and continue to control flow around multiple loops.",
    "timeToFix": 30
  },
  {
    "patternId": "no-lone-blocks",
    "title": "Prohibit unnecessary Nested Blocks",
    "description": "In JavaScript, prior to ES6, standalone code blocks delimited by curly braces do not create a new scope and have no use.",
    "timeToFix": 10
  },
  {
    "patternId": "no-loop-func",
    "title": "Prohibit Functions in Loops",
    "description": "Prohibits writing functions within loops, tends to result in errors.",
    "timeToFix": 30
  },
  {
    "patternId": "no-multi-spaces",
    "title": "Prohibit multiple spaces",
    "description": "Prohibits multiple spaces in a row that are not used for indentation",
    "timeToFix": 5
  },
  {
    "patternId": "no-multi-str",
    "title": "Prohibit Multiline Strings",
    "description": "Prohibits multiline strings by using a slash before a newline",
    "timeToFix": 10
  },
  {
    "patternId": "no-native-reassign",
    "title": "Prohibit Reassignment of Native Objects",
    "description": "Prohibits assigning a value to a built-in native object.",
    "timeToFix": 10
  },
  {
    "patternId": "no-new-func",
    "title": "Prohibit Function Constructor",
    "description": "Prohibits creating functions using the Function constructor",
    "timeToFix": 15
  },
  {
    "patternId": "no-new-wrappers",
    "title": "Prohibit Primitive Wrapper Instances",
    "description": "Prohibits creating unnecessary objects that function as wrappers like String, Number and Boolean",
    "timeToFix": 10
  },
  {
    "patternId": "no-new",
    "title": "Prohibit new For Side Effects",
    "description": "Prohibit creating objects with new and not using them.",
    "timeToFix": 20
  },
  {
    "patternId": "no-octal-escape",
    "title": "Prohibit Octal Escapes",
    "description": "Octal escape sequences are a deprecated feature, use Unicode escapes instead.",
    "timeToFix": 15
  },
  {
    "patternId": "no-octal",
    "title": "Prohibit Octal Literals",
    "description": "Prohibits the usage of octal literals, i.e numerals that begin with a leading zero",
    "timeToFix": 15
  },
  {
    "patternId": "no-param-reassign",
    "title": "Prohibit Reassignment of Function Parameters",
    "description": "Assignment to variables declared as function parameters can be misleading and lead to confusing behavior.",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "props",
        "description": "Specifies if props reassignment should be also prohibit [true, false]"
      }
    ]
  },
  {
    "patternId": "no-process-env",
    "title": "Prohibit process.env",
    "description": "Prohibits the usage of process.env to avoid global dependencies.",
    "timeToFix": 40
  },
  {
    "patternId": "no-proto",
    "title": "Prohibit use of __proto__",
    "description": "Prohibits the usage __proto__ property (has been deprecated), use getPrototypeOf.",
    "timeToFix": 10
  },
  {
    "patternId": "no-redeclare",
    "title": "Prohibit Redeclaring Variables",
    "description": "Prohibits that you redeclare a variable, using a var with a name that is already defined",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "builtinGlobals",
        "description": "When set to true, lets you apply this pattern to built-in global variables [true, false]"
      }
    ]
  },
  {
    "patternId": "no-return-assign",
    "title": "Prohibit Assignment in return Statement",
    "description": "Prohibits assignments in a return statement (it's usually a comparison typo)",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies when the assignment is disallowed [except-parens, always]"
      }
    ]
  },
  {
    "patternId": "no-script-url",
    "title": "Prohibit Script URLs",
    "description": "Prohibits using return of a script as URL, you have to parse it first",
    "timeToFix": 15
  },
  {
    "patternId": "no-self-compare",
    "title": "Prohibit Self Compare",
    "description": "Prohibits comparing a variable against itself, is usually an error or a typo",
    "timeToFix": 15
  },
  {
    "patternId": "no-sequences",
    "title": "Prohibit Comma Operator",
    "description": "Prohibits the comma operator when includes multiple expressions where only one is expected.",
    "timeToFix": 15
  },
  {
    "patternId": "no-throw-literal",
    "title": "Enforce throw Error Object",
    "description": "Enforces that when you throw an object, it has to be the Error object itself",
    "timeToFix": 10
  },
  {
    "patternId": "no-unused-expressions",
    "title": "Prohibit Unused Expressions",
    "description": "Prohibits that you have expressions that evaluate to a value but are never used.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowShortCircuit",
        "description": "When set to true allows short circuit evaluations [true, false]"
      },
      {
        "name": "allowTernary",
        "description": "When set to true allows the use of ternary operators [true, false]"
      }
    ]
  },
  {
    "patternId": "no-useless-call",
    "title": "Prohibit .call() and .apply()",
    "description": "Prohibits function invocation written by Function.prototype.call() and Function.prototype.apply()",
    "timeToFix": 10
  },
  {
    "patternId": "no-useless-concat",
    "title": "Prohibit unnecessary Concatenation",
    "description": "Prohibits to concatenate two strings together when they are on the same line since they could be combined into a single string.",
    "timeToFix": 5
  },
  {
    "patternId": "no-void",
    "title": "Prohibit void operator",
    "description": "Prohibits the use of void operator to obtain undefined",
    "timeToFix": 10
  },
  {
    "patternId": "no-warning-comments",
    "title": "Prohibit Warning Comments",
    "description": "Prohibits the use of code marks that may suggest that something is not done, such as //TODO: or //FIX ME.",
    "timeToFix": 5
  },
  {
    "patternId": "no-with",
    "title": "No with Statements",
    "description": "Prohibits the use of the with statement",
    "timeToFix": 5
  },
  {
    "patternId": "radix",
    "title": "Require Radix Parameter",
    "description": "Enforces the use of the of radix parameter in the parseInt() function.",
    "timeToFix": 5
  },
  {
    "patternId": "vars-on-top",
    "title": "Require Variable Declarations at top",
    "description": "Enforces variables Declaration are required to be on the top of their scope or top of the program.",
    "timeToFix": 5
  },
  {
    "patternId": "wrap-iife",
    "title": "Require IIFEs to be Wrapped",
    "description": "Require immediate function invocation to be wrapped in parentheses.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Wrapping style to enforce [outside, inside, any]"
      }
    ]
  },
  {
    "patternId": "yoda",
    "title": "Require/Prohibit Yoda Conditions",
    "description": "Require or Prohibits variable declaration which literal value of the condition comes first while the variable comes second.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies if the literal should always come first, or never come first [always, never]"
      }
    ]
  },
  {
    "patternId": "strict",
    "title": "Prohibit Strict Mode",
    "description": "Prohibits strict mode in a given scope",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The scope where the strict mode is allowed [never, function, global]"
      }
    ]
  },
  {
    "patternId": "init-declarations",
    "title": "Enforce/Prohibit Variable Initializations",
    "description": "Enforces or prohibits values to be assigned during the variable declaration.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies when the variables must be initialized [always, never]"
      }
    ]
  },
  {
    "patternId": "no-catch-shadow",
    "title": "Prohibit Shadowing Inside Catch",
    "description": "This rule prevents the use of variables in the catch clause parameter with the same name as a variable in the outer scope.",
    "timeToFix": 10
  },
  {
    "patternId": "no-delete-var",
    "title": "Prohibit Variables Deletion",
    "description": "This rule prevents the use of delete operator on variables:",
    "timeToFix": 5
  },
  {
    "patternId": "no-label-var",
    "title": "Prohibit Labels That Are Variables Names",
    "description": "Prohibits the use of labels that shares a name with a variable in that is in scope.",
    "timeToFix": 10
  },
  {
    "patternId": "no-shadow-restricted-names",
    "title": "Prohibit Shadowing of Restricted Names",
    "description": "Prohibits Defining restricted name(NaN,null..) to mean something else.",
    "timeToFix": 5
  },
  {
    "patternId": "no-shadow",
    "title": "Prohibit Shadowing",
    "description": "Prohibits the use of local variables that share the name with variables in the global scope.",
    "timeToFix": 10
  },
  {
    "patternId": "no-undef-init",
    "title": "Prohibit Initializing to undefined",
    "description": "Prohibit initializing variables to undefined.",
    "timeToFix": 10
  },
  {
    "patternId": "no-undef",
    "title": "Prohibit Undeclared Variables",
    "description": "Prohibits reference to an undeclared variable.",
    "timeToFix": 5
  },
  {
    "patternId": "no-undefined",
    "title": "Prohibit Use of undefined variable",
    "description": "Prohibits using  restricted name undefined in variables.",
    "timeToFix": 5
  },
  {
    "patternId": "no-unused-vars",
    "title": "Prohibit Unused Variables",
    "description": "Prohibit Unused Variables",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "vars",
        "description": "Specifies the scope, when set to \"all\" checks include global scope [all, local]"
      },
      {
        "name": "args",
        "description": "Specifies which arguments must be used, when set to \"all\" all named arguments must be used[all, after-used, none]"
      }
    ]
  },
  {
    "patternId": "no-use-before-define",
    "title": "Prohibit the use of variables before defining",
    "description": "Prohibit the use of variables before defining them.",
    "timeToFix": 10
  },
  {
    "patternId": "callback-return",
    "title": "Enforce Return After Callback",
    "description": "This rule prevents callback to happen multiple times",
    "timeToFix": 10
  },
  {
    "patternId": "global-require",
    "title": "Prohibit require() outside of the top-level module scope",
    "description": "Enforces declaring module's dependencies at the beginning of a module.",
    "timeToFix": 5
  },
  {
    "patternId": "handle-callback-err",
    "title": "Enforce Callback Error Handling",
    "description": "Enforces you to handle the errors that come from a callback.",
    "timeToFix": 10
  },
  {
    "patternId": "no-mixed-requires",
    "title": "Prohibit Mixed Requires",
    "description": "Prohibits the mixing required modules and other variable declarations.",
    "timeToFix": 5
  },
  {
    "patternId": "no-new-require",
    "title": "Prohibit new require",
    "description": "The require function is used to include modules that exist in separate files.",
    "timeToFix": 5
  },
  {
    "patternId": "no-path-concat",
    "title": "Prohibit concatenation with _dirname and _filename",
    "description": "Prohibits the use of __dirname and __filname in Node.Js for string concatenation.",
    "timeToFix": 10
  },
  {
    "patternId": "no-process-exit",
    "title": "Prohibit process.exit()",
    "description": "Prohibits process.exit() method in Node.js.",
    "timeToFix": 5
  },
  {
    "patternId": "no-restricted-modules",
    "title": "Prohibit Node modules",
    "description": "Prohibits the use of specificified node modules.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParamList",
        "description": "The modules you want to disallow ex: [\"fs\", \"os\"]"
      }
    ]
  },
  {
    "patternId": "no-sync",
    "title": "Prohibit Synchronous Methods",
    "description": "Prohibits the use of synchronous methods consider using the asynchronous ones.",
    "timeToFix": 10
  },
  {
    "patternId": "array-bracket-spacing",
    "title": "Enforce/Prohibit spaces inside of brackets",
    "description": "Enforces or prohibits the use of spaces between array brackets.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The bracket spacing style to apply [always, never]"
      }
    ]
  },
  {
    "patternId": "block-spacing",
    "title": "Enforce/Prohibit spaces inside of single line blocks",
    "description": "This rule is for spacing style within single line blocks.",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Enforces or prohibits spaces within single block lines [always, never]"
      }
    ]
  },
  {
    "patternId": "brace-style",
    "title": "Enforce Brace Style",
    "description": "Enforces a style in placement of curly braces relative to their control statement and body.",
    "timeToFix": 15
  },
  {
    "patternId": "camelcase",
    "title": "Enforce camelCase",
    "description": "Enforces the use of camelCase on variables.",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "properties",
        "description": "Specifies if this pattern should always check for property names [always, never]"
      }
    ]
  },
  {
    "patternId": "comma-spacing",
    "title": "Enforces spacing around commas",
    "description": "Spacing around commas improve readability of a list of items.",
    "timeToFix": 10
  },
  {
    "patternId": "comma-style",
    "title": "Enforces comma style",
    "description": "This rule is aimed at enforcing a particular comma style in JavaScript.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The placement of the comma in the line [first, last]"
      }
    ]
  },
  {
    "patternId": "computed-property-spacing",
    "title": "Enforce/Prohibit spaces in computed properties",
    "description": "Requires or prohibits spaces between computed properties.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies if you always need a space inside computed properties [always, never]"
      }
    ]
  },
  {
    "patternId": "consistent-this",
    "title": "Require Consistent this",
    "description": "Enforces a consistent name for 'this' variable.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "This rule designates a variable as the chosen alias for this."
      }
    ]
  },
  {
    "patternId": "eol-last",
    "title": "Require file to end in newline",
    "description": "This rule enforces files to end in newline for all non-empty programs.",
    "timeToFix": 15
  },
  {
    "patternId": "func-names",
    "title": "Require Function Expressions to have Name",
    "description": "Enforces the naming of functions expressions.",
    "timeToFix": 10
  },
  {
    "patternId": "func-style",
    "title": "Enforce Function Style",
    "description": "With this rule function declarations must have the function keyword first, followed by a name, followed by its arguments and the function body.",
    "timeToFix": 10
  },
  {
    "patternId": "id-length",
    "title": "Enforce identifiers limit length",
    "description": "Enforces a minimum and/or maximum variable identifier length.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "min",
        "description": "The minimum number of characters an identifier name should be (after prefix/suffix stripped)"
      },
      {
        "name": "max",
        "description": "The maximum number of characters an identifier name should be (after prefix/suffix stripped)"
      },
      {
        "name": "properties",
        "description": "Specifies if this pattern should always check for property names [always, never]"
      },
      {
        "name": "exceptions",
        "description": "An array of identifier names that the rule should not apply to. Ex: [\"x\", \"y\"]"
      }
    ]
  },
  {
    "patternId": "id-match",
    "title": "Require IDs to match a pattern",
    "description": "This rule allows you to precisely define and enforce the variables and function names your team should use.",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Regex that specifies the allowed name convention"
      },
      {
        "name": "properties",
        "description": "Specifies whether this pattern will be applied to property names or ignore them [true, false]"
      }
    ]
  },
  {
    "patternId": "indent",
    "title": "Enforce Indentation standard",
    "description": "This option validates a specific tab width for your code in block statements.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies the number of spaces for indentation (or you can write \"tab\" instead)"
      }
    ]
  },
  {
    "patternId": "jsx-quotes",
    "title": "Enforce JSX Quote Style",
    "description": "Enforces the same type of quotes throughout the code",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The quoting style you prefer [prefer-single, prefer-double]"
      }
    ]
  },
  {
    "patternId": "key-spacing",
    "title": "Enforce Property Spacing",
    "description": "Enforces spacing around the colon in object literal properties and ensures vertical alignment of values in an object literal",
    "timeToFix": 15
  },
  {
    "patternId": "lines-around-comment",
    "title": "Enforce empty lines around comments",
    "description": "Requires empty space around comments.",
    "timeToFix": 10
  },
  {
    "patternId": "linebreak-style",
    "title": "Prohibit mixing CRLF and LF linebreaks",
    "description": "Enforces the same style of linebreak throughout the code.",
    "timeToFix": 5
  },
  {
    "patternId": "max-nested-callbacks",
    "title": "Set Maximum Depth of Nested Callbacks",
    "description": "Enforces a maximum number of nested callbacks.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The max depth of nesting"
      }
    ]
  },
  {
    "patternId": "new-cap",
    "title": "Require Constructors to Use Initial Caps",
    "description": "Enforces constructors to begin with uppercase letter.",
    "timeToFix": 10
  },
  {
    "patternId": "new-parens",
    "title": "Require Parentheses for Constructors",
    "description": "Enforces the use of parentheses when invoking a constructor even if there are no arguments.",
    "timeToFix": 10
  },
  {
    "patternId": "newline-after-var",
    "title": "Enforce/Prohibit newline after declarations",
    "description": "Enforces or prohibits an empty line after var, let and const statements.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies if you should always or never have a space after declarations [always, never]"
      }
    ]
  },
  {
    "patternId": "no-array-constructor",
    "title": "Prohibit Array constructor",
    "description": "Prohibits the usage of the Array constructor to create new Arrays.",
    "timeToFix": 10
  },
  {
    "patternId": "no-continue",
    "title": "Prohibit continue",
    "description": "Prohibits the use of continue in the current or labeled loop.",
    "timeToFix": 10
  },
  {
    "patternId": "no-inline-comments",
    "title": "Prohibit inline comments",
    "description": "Prohibits comments in the same line as code.",
    "timeToFix": 5
  },
  {
    "patternId": "no-lonely-if",
    "title": "Prohibit lonely if",
    "description": "Prohibits the use of 'if' as the the only statement in the else block. Use 'else if' instead.",
    "timeToFix": 10
  },
  {
    "patternId": "no-mixed-spaces-and-tabs",
    "title": "Prohibit mixed spaces and tabs",
    "description": "Prohibits the mixing of tabs and spaces for indentation.",
    "timeToFix": 5
  },
  {
    "patternId": "no-multiple-empty-lines",
    "title": "Prohibit multiple blank lines",
    "description": "Prohibits multiple consecutive blank lines in the code.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "max",
        "description": "The maximum number of consecutive blank lines"
      },
      {
        "name": "maxEOF",
        "description": "The maximum number of consecutive blank lines at the end of the file"
      }
    ]
  },
  {
    "patternId": "no-nested-ternary",
    "title": "Prohibit Nested Ternaries",
    "description": "Prohibits the use of nested ternary expressions.",
    "timeToFix": 10
  },
  {
    "patternId": "no-negated-condition",
    "title": "Prohibit negated expressions in conditions",
    "description": "Prohibits the use of a negated expression in an 'if' condition when the else branch is not empty",
    "timeToFix": 5
  },
  {
    "patternId": "no-new-object",
    "title": "Prohibit Object constructor",
    "description": "Prohibits the use of the Object constructor to create new generic objects.",
    "timeToFix": 5
  },
  {
    "patternId": "no-restricted-syntax",
    "title": "Prohibit certain syntax",
    "description": "This pattern prohibits the specified features, such as FunctionExpression or WithStatement.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParamList",
        "description": "The features you want to disallow ex: [\"FunctionExpression\", \"WithStatement\"]"
      }
    ]
  },
  {
    "patternId": "no-spaced-func",
    "title": "Prohibit Spaces in Function Calls",
    "description": "Prohibits spaces between the name of a functions and the parentheses that execute it.",
    "timeToFix": 5
  },
  {
    "patternId": "no-ternary",
    "title": "Prohibit Ternary Operators",
    "description": "The ternary operator is used to conditionally assign a value to a variable.",
    "timeToFix": 10
  },
  {
    "patternId": "no-trailing-spaces",
    "title": "Prohibit trailing spaces at the end of lines",
    "description": "This rule cleans the extra space in the end of lines.",
    "timeToFix": 10
  },
  {
    "patternId": "no-underscore-dangle",
    "title": "Prohibit Dangling Underscores in Identifiers",
    "description": "Prohibits the use of underscores at the beginning or end of a variable name.",
    "timeToFix": 5
  },
  {
    "patternId": "no-unneeded-ternary",
    "title": "Prohibit unnecessary ternary",
    "description": "Prohibits unnecessary ternary operators to select between boolean values.",
    "timeToFix": 10
  },
  {
    "patternId": "object-curly-spacing",
    "title": "Enforce/Prohibit spaces in curly braces",
    "description": "Enforces or prohibits spaces between curly braces.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies if you always want a space inside of curly braces [always, never]"
      }
    ]
  },
  {
    "patternId": "one-var",
    "title": "Enforce/Prohibit Variable Declaration Style",
    "description": "This rule Enforces/Prohibits you to declare your variables using one 'var', or one 'var' for each variable",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies if you always need to declare your variables using just one 'var' [always, never]"
      }
    ]
  },
  {
    "patternId": "operator-assignment",
    "title": "Enforce Assignment Shorthand",
    "description": "Enforces the usage of assignment shorthand operator when possible, ex: x += y instead of x = x + y",
    "timeToFix": 5
  },
  {
    "patternId": "operator-linebreak",
    "title": "Operator Linebreak Style",
    "description": "This rule enforces a coherent linebreak style.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies where the linebreak operator should be placed [after, before, none]"
      }
    ]
  },
  {
    "patternId": "padded-blocks",
    "title": "Enforce padding within blocks",
    "description": "Enforces separating the block content and the surrounding code.",
    "timeToFix": 10
  },
  {
    "patternId": "quote-props",
    "title": "Quoting Style for Property Names",
    "description": "This rule enforces you to quote with literals or strings.",
    "timeToFix": 10
  },
  {
    "patternId": "quotes",
    "title": "Quotes Style",
    "description": "Enforce coherent quotes style",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The quoting style you prefer [single, double]"
      }
    ]
  },
  {
    "patternId": "require-jsdoc",
    "title": "Require JSDoc comment",
    "description": "This rule generates warnings for nodes which do not have JSDoc comments.",
    "timeToFix": 10
  },
  {
    "patternId": "semi-spacing",
    "title": "Enforce spacing before and after semicolons",
    "description": "JavaScript allows you to place unnecessary spaces before or after a semicolon.",
    "timeToFix": 10
  },
  {
    "patternId": "semi",
    "title": "Enforce/Prohibit Semicolons",
    "description": "Enforces or prohibits semicolons at the end of each statement.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies if you always want semicolons at the end of statements [always, never]"
      }
    ]
  },
  {
    "patternId": "sort-vars",
    "title": "Variable Sorting",
    "description": "Enforce the sorting of variables during declaration.",
    "timeToFix": 5
  },
  {
    "patternId": "space-before-blocks",
    "title": "Require/Prohibit Space Before Blocks",
    "description": "Requires or prohibits in the spacing before blocks.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies that you always need (or never) to have at least one space before a block [always/never]"
      }
    ]
  },
  {
    "patternId": "space-before-function-paren",
    "title": "Require/Prohibit a space before function parenthesis",
    "description": "When formatting a function, whitespace is allowed/disallowed between the function name or function keyword and the opening paren.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies that you always need (or never) to have at least one space before function parenthesis [always/never]"
      }
    ]
  },
  {
    "patternId": "space-in-parens",
    "title": "Require/Prohibit spaces inside parentheses",
    "description": "Enforces or prohibit spaces inside of parentheses.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies that you always need (or never) to have at least one space inside of parentheses [always/never]"
      }
    ]
  },
  {
    "patternId": "space-infix-ops",
    "title": "Require Spaces Around Infix Operators",
    "description": "Enforces spaces around operators.",
    "timeToFix": 10
  },
  {
    "patternId": "space-unary-ops",
    "title": "Require or Prohibit spaces before/after unary operators",
    "description": "Enforces/Prohibits spaces before/after unary operators.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "words",
        "description": "When set to true, unary words such as new, delete or void must have spaces before and after it [true, false]"
      },
      {
        "name": "nonwords",
        "description": "When set to true, unary operators such as -, +, ++ or !! must have spaces before and after it [true, false]"
      }
    ]
  },
  {
    "patternId": "spaced-comment",
    "title": "Require/Prohibit whitespace at beginning of a comment",
    "description": "Enforces/Prohibit a whitespace immediately after the initial // or /* of a comment.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "When set to always, you need to have a white space immediately after the initial // or /* [always, never]"
      }
    ]
  },
  {
    "patternId": "wrap-regex",
    "title": "Require Regex Literals to be Wrapped",
    "description": "Enforces parentheses around slash operator.",
    "timeToFix": 10
  },
  {
    "patternId": "arrow-parens",
    "title": "Require parentheses in arrow function arguments",
    "description": "Enforces the consistent use of parentheses in arrow functions.",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies when the parentheses are necessary [always, as-needed]"
      }
    ]
  },
  {
    "patternId": "arrow-spacing",
    "title": "Require space around arrow function's",
    "description": "Enforces spaces around the arrow function.",
    "timeToFix": 5
  },
  {
    "patternId": "constructor-super",
    "title": "Verify calls of super() in constructors",
    "description": "This rule checks for super in constructors of derived classes.",
    "timeToFix": 5
  },
  {
    "patternId": "generator-star-spacing",
    "title": "Enforce spacing around *",
    "description": "Enforces spacing around * in generator functions.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "before",
        "description": "When set to true, enforce space before * [true, false]"
      },
      {
        "name": "after",
        "description": "When set to true, enforce space after * [true, false]"
      }
    ]
  },
  {
    "patternId": "no-class-assign",
    "title": "Prohibit modifying class declarations",
    "description": "Prohibits modifying variables of class declarations.",
    "timeToFix": 10
  },
  {
    "patternId": "no-const-assign",
    "title": "Prohibit modifying const",
    "description": "Prohibits changes in variables that are declared using const keyword.",
    "timeToFix": 5
  },
  {
    "patternId": "no-dupe-class-members",
    "title": "Prohibit duplicate name in class members",
    "description": "Prohibits declarations of the same name in class members.",
    "timeToFix": 10
  },
  {
    "patternId": "no-this-before-super",
    "title": "Prohibit 'this' before 'super()'",
    "description": "In the constructor of derived classes, if this/super are used before super() calls, it raises a reference error.",
    "timeToFix": 10
  },
  {
    "patternId": "no-var",
    "title": "Enforce 'let' or 'const'",
    "description": "Enforces the use of 'let' or 'const' instead of 'var'.",
    "timeToFix": 10
  },
  {
    "patternId": "object-shorthand",
    "title": "Enforce Object Literal Shorthand Syntax",
    "description": "This syntax (ES6) can make defining complex object literals much cleaner.",
    "timeToFix": 10
  },
  {
    "patternId": "prefer-arrow-callback",
    "title": "Enforce arrow function as callback",
    "description": "Enforce the usage of arrow functions as callback.",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-const",
    "title": "Enforce using const",
    "description": "Enforce the usage of 'const' instead of 'var' if a variable is never modified.",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-spread",
    "title": "Enforce spread operator",
    "description": "In ES2015, you should use the spread operator instead of Function.prototype.apply() to call variadic functions.",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-reflect",
    "title": "Enforce Reflect methods where applicable (ES6)",
    "description": "The ES6 Reflect API comes with a handful of methods which deprecate methods on old constructors.",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-template",
    "title": "Enforce template literals (ES6)",
    "description": "In ES2015 (ES6), we can use template literals instead of string concatenation.",
    "timeToFix": 10
  },
  {
    "patternId": "require-yield",
    "title": "Prohibit generator functions without 'yield'",
    "description": "This rule generates warnings for generator functions that do not have the yield keyword.",
    "timeToFix": 10
  },
  {
    "patternId": "security_detect-unsafe-regex",
    "title": "Prohibit Unsafe Regular Expression",
    "description": "Prohibits Unsafe Regular Expression (new RegExp).",
    "timeToFix": 15
  },
  {
    "patternId": "security_detect-buffer-noassert",
    "title": "Prohibit Buffer with noAssert",
    "description": "Prohibits buffer read / write calls that use noAssert set to true.",
    "timeToFix": 15
  },
  {
    "patternId": "security_detect-child-process",
    "title": "Prohibit instances of child_process",
    "description": "Prohibits instances of child_process.",
    "timeToFix": 30
  },
  {
    "patternId": "security_detect-disable-mustache-escape",
    "title": "Prohibit no Markup escaping in Mustache",
    "description": "Prohibits having disabled Markup escaping in Mustache.",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-eval-with-expression",
    "title": "Prohibit eval with expression",
    "description": "Prohibits eval statement with non Literal argument types.",
    "timeToFix": 15
  },
  {
    "patternId": "security_detect-no-csrf-before-method-override",
    "title": "Prohibit CSRF middleware before methodOverride",
    "description": "Prohibits express.csrf() middleware before express.methodOverride().",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-non-literal-fs-filename",
    "title": "Prohibit calls to fs functions with expression",
    "description": "Prohibits calls to fs functions that take a non Literal value as the filename parameter.",
    "timeToFix": 15
  },
  {
    "patternId": "security_detect-non-literal-regexp",
    "title": "Prohibit RegExp's with expression",
    "description": "Prohibits RegExp's created from non-literal strings.",
    "timeToFix": 15
  },
  {
    "patternId": "security_detect-non-literal-require",
    "title": "Prohibit calls to require with expression",
    "description": "Prohibits calls to require with non-literal argument.",
    "timeToFix": 15
  },
  {
    "patternId": "security_detect-object-injection",
    "title": "Prohibit instances of var[var]",
    "description": "Prohibits instances of var[var].",
    "timeToFix": 15
  },
  {
    "patternId": "security_detect-possible-timing-attacks",
    "title": "Prohibit potential hot spot string comparisons",
    "description": "Prohibits potential hot spot string comparisons of passwords, secrets and hashes.",
    "timeToFix": 5
  },
  {
    "patternId": "security_detect-pseudoRandomBytes",
    "title": "Prohibit crypto.pseudoRandomBytes",
    "description": "Prohibits crypto.pseudoRandomBytes since it's not cryptographically strong.",
    "timeToFix": 5
  },
  {
    "patternId": "scanjs-rules_property_sessionStorage",
    "title": "Session storage",
    "description": "Client-side data storage.",
    "timeToFix": 5
  }
]
